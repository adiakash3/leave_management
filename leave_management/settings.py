"""
Django settings for leave_management project.

Generated by 'django-admin startproject' using Django 3.1.

"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3tm@_iu-^fkn2jtei&c73vn&8g()9506#q9^&g77t2h_1j+qmr'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
CORS_ORIGIN_ALLOW_ALL = True

# Application definition

INSTALLED_APPS = [
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'crispy_forms',
    'accounts',
    'dashboard',
    'emails',
    'rest_framework.authtoken',
    'holidays',
    'leaves',
    'push_notifications',
    'user_type_apps.managers',
    'user_type_apps.team_leaders',
    'user_type_apps.employees',
    'shifts',
    'reports',
    'departments',
    'corsheaders',
    'ckeditor',
    'ckeditor_uploader',
    
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'


MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTH_USER_MODEL = 'accounts.User'

ROOT_URLCONF = 'leave_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'leave_management.wsgi.application'
ASGI_APPLICATION = 'leave_management.routing.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [("localhost", 6379)],
        },
    },
}

# Database

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'leave_management',
        'USER': 'root',
        'PASSWORD': 'welcome',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'sql_mode': 'traditional',
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

    'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10

}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
MEDIA_ROOT =  os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

CKEDITOR_UPLOAD_PATH = "uploadsCK/"

# logs
LOG_ROOT = os.path.join(BASE_DIR,'log')
if not os.path.exists(LOG_ROOT):
    os.makedirs(LOG_ROOT)

LOG_BACKUP_COUNT = 1
LOG_MAX_FILE_SIZE = 1024*1024*10 # 10MB
LOG_HANDLER_CLASS = 'logging.handlers.RotatingFileHandler'
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'simple': {
            'format': '%(levelname)s %(asctime)s %(name)s.%(funcName)s:%(lineno)s- %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': LOG_HANDLER_CLASS,
            'filename': os.path.join(BASE_DIR, 'log/info.log'),
            'formatter': 'simple',
            'maxBytes': LOG_MAX_FILE_SIZE,
            'backupCount': LOG_BACKUP_COUNT,
        },
        'error': {
            'level': 'ERROR',
            'class': LOG_HANDLER_CLASS,
            'filename': os.path.join(BASE_DIR, 'log/error.log'),
            'formatter': 'simple',
            'maxBytes': LOG_MAX_FILE_SIZE,
            'backupCount': LOG_BACKUP_COUNT,
        },
        'debug': {
            'level': 'DEBUG',
            'class': LOG_HANDLER_CLASS,
            'filename': os.path.join(BASE_DIR, 'log/debug.log'),
            'formatter': 'simple',
            'maxBytes': LOG_MAX_FILE_SIZE,
            'backupCount': LOG_BACKUP_COUNT,
        },
        'critical': {
            'level': 'CRITICAL',
            'class': LOG_HANDLER_CLASS,
            'filename': os.path.join(BASE_DIR, 'log/critical.log'),
            'maxBytes': LOG_MAX_FILE_SIZE,
            'backupCount': LOG_BACKUP_COUNT,
        },
    },
    'loggers': {
        '': {
            'handlers': ['critical', 'debug', 'file', 'error'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}